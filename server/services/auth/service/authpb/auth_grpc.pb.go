// Versi贸n de Protocol Buffer a utilizar.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: auth.proto

// Paquete gRPC para el servicio de autenticaci贸n.

package authpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthServer_Log_FullMethodName = "/auth.AuthServer/Log"
)

// AuthServerClient is the client API for AuthServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Define los gRPCs disponibles para autenticaci贸n.
type AuthServerClient interface {
	// Comprueba si las credenciales son correctas.
	Log(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type authServerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServerClient(cc grpc.ClientConnInterface) AuthServerClient {
	return &authServerClient{cc}
}

func (c *authServerClient) Log(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthServer_Log_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServerServer is the server API for AuthServer service.
// All implementations must embed UnimplementedAuthServerServer
// for forward compatibility.
//
// Define los gRPCs disponibles para autenticaci贸n.
type AuthServerServer interface {
	// Comprueba si las credenciales son correctas.
	Log(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedAuthServerServer()
}

// UnimplementedAuthServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServerServer struct{}

func (UnimplementedAuthServerServer) Log(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedAuthServerServer) mustEmbedUnimplementedAuthServerServer() {}
func (UnimplementedAuthServerServer) testEmbeddedByValue()                    {}

// UnsafeAuthServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServerServer will
// result in compilation errors.
type UnsafeAuthServerServer interface {
	mustEmbedUnimplementedAuthServerServer()
}

func RegisterAuthServerServer(s grpc.ServiceRegistrar, srv AuthServerServer) {
	// If the following call pancis, it indicates UnimplementedAuthServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthServer_ServiceDesc, srv)
}

func _AuthServer_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServerServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServer_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServerServer).Log(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthServer_ServiceDesc is the grpc.ServiceDesc for AuthServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthServer",
	HandlerType: (*AuthServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _AuthServer_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
